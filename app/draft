pragma solidity ^0.4.23;
contract EcommerceStore{
    //Declaring contract variables
    enum ProductCondition {New, Used} //no semicolon
    uint public productIndex;
    mapping(address => mapping(uint =>Product)) stores;
    mapping(uint => address) productIdInStore;
    struct Product {
        uint id;
        string name;
        string category;
        string imageLink;
        string descLink;
        uint startTime;
        uint price;
        ProductCondition condition;
        address buyer;
    }//no semicolon
    
    constructor() public {
        productIndex = 0;
    }
    //Adding the product to the Blockchain, Adding and retrieving Products from the Blockchain
    //In our contract everyone can add new products to the Blockchain
    function addProductToStore(string _name, string _category, string _imageLink, string _descLink,
        uint _startTime, uint _price, uint _ProductCondition) { //there's no buyer for now
            productIndex += 1;
            Product memory product = Product(productIndex, _name, _category, _imageLink, _descLink, 
            _startTime, _price, ProductCondition(_ProductCondition), 0);
            
            stores[msg.sender][productIndex] = product;
            productIdInStore[productIndex] = msg.sender;
        }
     
     function getProduct(uint _productId) public view returns(uint, string, string, string, string, uint, uint, 
        ProductCondition, address) {
            Product memory product = stores[productIdInStore[_productId]][_productId];
            
            
        }

}
